%% 
% Setup

cd('C:\Users\tamar\Documents\GitHub\rFASTCORMICS')
addpath(genpath(pwd))

%optional
set(0,'defaultTextInterpreter','none')
set(groot,'defaulttextinterpreter','none');
set(groot, 'DefaultAxesTickLabelInterpreter', 'none')
set(groot, 'defaultLegendInterpreter','none');

feature astheightlimit 2000

altcolor= [255 255 255;255 204 204; 255 153 153; 255 102 102; 255 51 51;...
    255 0 0; 204 0 0; 152 0 0; 102 0 0;  51 0 0]/255; %shorter 10% = 1 bar

delete clone*.log %delete some files generated by cplex
%% 3.1 Expression data input
% Import the gene expression data into Matlab. 

data_cancer = readtable('fpkm_BRCA_cancer.txt', "ReadRowNames",true)
data_control = readtable('fpkm_BRCA_control.txt', "ReadRowNames",true)

data = [data_cancer, data_control]

fpkm = table2array(data)
rownames = data.Properties.RowNames
colnames = data.Properties.VariableNames
%% 
% discretization step 

% discretized = discretize_FPKM(fpkm, colnames,1) %for figures
discretized = discretize_FPKM(fpkm, colnames) % no figures
%% 3.2.	Context-specific model reconstruction
% human reconstruction Recon 2.04 
% 
% can also be downloaded from https://www.vmh.life/files/reconstructions/Recon/2.04/Recon2.v04.mat_.zip. 

load Recon2.v04.mat
%% 
% consitent model creation

A = fastcc_4_rfastcormics(modelR204, 1e-4,0)
consistent_model = removeRxns(modelR204, modelR204.rxns(setdiff(1:numel(modelR204.rxns),A)))
%% 
% setting parameters

load medium_example.mat
load dico_ML.mat

epsilon = 1e-4
consensus_proportion = 0.9

already_mapped_tag = 0
unpenalizedSystems = {'Transport, endoplasmic reticular';
    'Transport, extracellular';
    'Transport, golgi apparatus';
    'Transport, mitochondrial';
    'Transport, peroxisomal';
    'Transport, lysosomal';
    'Transport, nuclear'};
unpenalized = consistent_model.rxns(ismember(consistent_model.subSystems,unpenalizedSystems));
optional_settings.unpenalized = unpenalized;

optional_settings.func = {'DM_atp_c_';'biomass_reaction'}; % forced reactions

not_medium_constrained = 'EX_tag_hs(e)';% if no constrain is used please remove the field.
optional_settings.not_medium_constrained = not_medium_constrained;

optional_settings.medium = medium_example;% if no medium is used please remove the field.
%% 
% reconstruct the context-specific models
% 
% consensus models

[model_cancer, A_final_cancer] = fastcormics_RNAseq(consistent_model, discretized(:,1:10), rownames, dico, already_mapped_tag, consensus_proportion, epsilon, optional_settings)
[model_control, A_final_control] = fastcormics_RNAseq(consistent_model, discretized(:,11:20), rownames, dico, already_mapped_tag, consensus_proportion, epsilon, optional_settings)

models_keep_consensus = zeros(numel(consistent_model.rxns), 2)

models_keep_consensus(A_final_cancer,1) = 1
models_keep_consensus(A_final_control,2) = 1
%% 
% sample-specific models

for i = 1:numel(colnames) %for each sample
    [~, A_keep{i}] = fastcormics_RNAseq(consistent_model, discretized(:,i), ...
        rownames, dico , already_mapped_tag, consensus_proportion, epsilon, optional_settings);
end

models_keep = zeros(numel(consistent_model.rxns), numel(colnames))

for i=1:numel(colnames)
    models_keep(A_keep{i},i) = 1
end
%% 3.3.	Basic model and pathway analysis
% similarity between two models can be assessed via the Jaccard similarity index

J = squareform(pdist(models_keep','jaccard'));

cgo_J = clustergram(1-J,...
    'RowLabels', colnames,...
    'ColumnLabels', colnames,...
    'ColumnLabelsRotate',270, ...
    'Cluster', 'all', ...
    'symmetric','False',...
    'Colormap', altcolor)
addTitle(cgo_J,{'Model similarity based on Jaccard distance','models_keep'})
%% 
% Pathway analysis 

Pathways = table(unique(consistent_model.subSystems));
[pathways, ~, ub] = unique(consistent_model.subSystems);
path_counts = histc(ub, 1:length(pathways));
T = table(pathways, path_counts);
[I, ia, ib] = intersect(Pathways.Var1, T.pathways);
Pathways.consistent(ia) = T.path_counts(ib);
%% 
% pathway information for the consensus models

[pathways, ~, ub] = unique(consistent_model.subSystems(find(models_keep_consensus(:,1))));
path_counts = histc(ub, 1:length(pathways));
T = table(pathways, path_counts);
[I, ia, ib] = intersect(Pathways.Var1, T.pathways);
Pathways.Var2(ia) = T.path_counts(ib) ;
Pathways.Properties.VariableNames{3} = 'cancer_consensus';

[pathways, ~, ub] = unique(consistent_model.subSystems(find(models_keep_consensus(:,2))));
path_counts = histc(ub, 1:length(pathways));
T = table(pathways, path_counts);
[I, ia, ib] = intersect(Pathways.Var1, T.pathways);
Pathways.Var2(ia) = T.path_counts(ib) ;
Pathways.Properties.VariableNames{4} = 'control_consensus';
%% 
% pathway information for the sample-specific models

for i=1:numel(colnames)
    [pathways, ~, ub] = unique(consistent_model.subSystems(find(models_keep(:,i))));
    path_counts = histc(ub, 1:length(pathways));
    T = table(pathways, path_counts);
    [I, ia, ib] = intersect(Pathways.Var1, T.pathways);
    Pathways.Var2(ia) = T.path_counts(ib) ;
    Pathways.Properties.VariableNames{4+i} = colnames{i};
end
%% 
% pathway activity rates

PathwayActivity = Pathways;
for i=3:size(PathwayActivity,2)
    PathwayActivity(:,i) = array2table(table2array(PathwayActivity(:,i))./table2array(PathwayActivity(:,2)));
end
PathwayActivity
% comparison of 2 conditions
% pathways with a difference higher than 20% 

diff_idx = find(abs(table2array(PathwayActivity(:,3))- table2array(PathwayActivity(:,4))) > 0.2)
%% 
% plotting

figure
hold on
scatter(table2array(PathwayActivity(:,3)),table2array(PathwayActivity(:,4)),'filled',...
    'MarkerFaceColor',[0.9 0.9 0.9])
scatter(table2array(PathwayActivity(diff_idx,3)),table2array(PathwayActivity(diff_idx,4)),...
    'black')
ylabel('cancer consensus model')
xlabel('control consensus model')
title('Pathway presence rate in the consensus models')
line([0 1], [0,1],'Color','k')
line([0 0.8], [0.2,1],'Color','k','LineStyle','--')
line([0.2 1], [0,0.8],'Color','k','LineStyle','--')
legend({'All pathways','>20%'},"Location","best")
text(table2array(PathwayActivity(diff_idx,3)),table2array(PathwayActivity(diff_idx,4)), PathwayActivity.Var1(diff_idx))
%% 
% comparison of multiple samples

cgo = clustergram(table2array(PathwayActivity(:,3:end)),...
    'RowLabels', PathwayActivity.Var1,...
    'ColumnLabels', PathwayActivity.Properties.VariableNames(3:end),...
    'ColumnLabelsRotate',270, ...
    'Cluster', 'all', ...
    'symmetric','False',...
    'Colormap', altcolor)
h = plot(cgo); set(h,'TickLabelInterpreter','none');
colorbar(h)
title(h,'Pathway activity for all models')
%% 3.4. In silico gene deletion and drug repurposing
% set the biomass reaction as objective function:

model_out = changeObjective(consistent_model,'biomass_reaction')
%% 
% set the ATP demand as objective function

model_out = changeObjective(consistent_model,'DM_atp_c_')
%% 
% verified with with the checkObjective function 

checkObjective(model_out)
%% perform the in silico gene deletion 
% initialize the solver

changeCobraSolver('ibm_cplex')
%% 
% run the single gene deletion

for i=1:size(models_keep,2) %for each model
    
    %ATP
    ind = find(~cellfun(@isempty, regexp(consistent_model.rxns, 'DM_atp_c_')));
    model_out = removeRxns(consistent_model,consistent_model.rxns(setdiff(1:numel(consistent_model.rxns),find(models_keep(:,i))))); % create model based on active reactions
    model_out = changeObjective(model_out,consistent_model.rxns(ind));
    
    [grRatio, grRateKO, grRateWT, hasEffect, delRxns, fluxSolution] = singleGeneDeletion_rFASTCORMICS(model_out,'FBA',[],0,1);
    
    grRatio_ATP(:,i)    = grRatio;
    grRateKO_ATP(:,i)   = grRateKO;
    grRateWT_ATP(:,i)   = grRateWT;
    
    %Biomass
    ind = find(~cellfun(@isempty, regexp(consistent_model.rxns, 'biomass_reaction')));
    model_out = removeRxns(consistent_model,consistent_model.rxns(setdiff(1:numel(consistent_model.rxns),find(models_keep(:,i))))); % create model based on active reactions
    model_out = changeObjective(model_out,consistent_model.rxns(ind));
    
    [grRatio, grRateKO, grRateWT, hasEffect, delRxns, fluxSolution, genelist] = singleGeneDeletion_rFASTCORMICS(model_out,'FBA',[],0,1);
    
    grRatio_biomass(:,i)    = grRatio;
    grRateKO_biomass(:,i)   = grRateKO;
    grRateWT_biomass(:,i)   = grRateWT;
    
end
%% determination of cancer-specific essential genes

[B, ia, ib] = intersect(genelist,dico.ENTREZ)
genelist(ia, 2) =   dico.SYMBOL(ib)


essential_cancer_genes = genelist(sum(grRatio_biomass(:,1:10) < 0.5,2) > 5,2)
essential_control_genes = genelist(sum(grRatio_ATP(:,11:20) < 0.9,2) > 1,2)


cancer_specific_genes = setdiff(essential_cancer_genes, essential_control_genes)
%% Drug deletion
% define a list of drugs 

load GeneDrugRelations.mat
DrugList = unique(GeneDrugRelations.DrugName)


for i=1:size(models_keep,2)
    
    %ATP
    ind = find(~cellfun(@isempty, regexp(consistent_model.rxns, 'DM_atp_c_')));
    model_out = removeRxns(consistent_model,consistent_model.rxns(setdiff(1:numel(consistent_model.rxns),find(models_keep(:,i)))));
    model_out = changeObjective(model_out,consistent_model.rxns(ind));
    
    [grRatio, grRateKO, grRateWT] = DrugDeletion(model_out,'FBA',DrugList);
    
    Drug_grRatio_ATP(:,i)    = grRatio;
    Drug_grRateKO_ATP(:,i)   = grRateKO;
    Drug_grRateWT_ATP(:,i)   = grRateWT;
    
    %Biomass
    ind = find(~cellfun(@isempty, regexp(consistent_model.rxns, 'biomass_reaction')));
    model_out = removeRxns(consistent_model,consistent_model.rxns(setdiff(1:numel(consistent_model.rxns),find(models_keep(:,i)))));
    model_out = changeObjective(model_out,consistent_model.rxns(ind));
    
    [grRatio, grRateKO, grRateWT] =  DrugDeletion(model_out,'FBA',DrugList);
    
    Drug_grRatio_biomass(:,i)    = grRatio;
    Drug_grRateKO_biomass(:,i)   = grRateKO;
    Drug_grRateWT_biomass(:,i)   = grRateWT;
    
end
%% cancer-specific drugs for repurposing

cancer_drugs = DrugList(sum(Drug_grRatio_biomass(:,1:10) < 0.5,2) > 5)
control_drugs = DrugList(sum(Drug_grRatio_ATP(:,11:20) < 0.9,2) > 1)


cancer_specific_drugs = setdiff(cancer_drugs, control_drugs)