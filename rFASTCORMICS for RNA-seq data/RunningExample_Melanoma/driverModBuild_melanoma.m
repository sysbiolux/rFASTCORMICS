%% load generic model and confirm consistency
clearvars -except solverOK, close all, clc 

delete clone*.log %delete some files generated by cplex

feature astheightlimit 2000 %since a never version of matlab, this small code is needed for the model reconstruction

load('Recon3DModel.mat')
  % Recon 2.04 model, 
model.description='Recon';
model.lb(find(ismember(model.rxns,'EX_h2o2[e]')))=0; %close unwanted uptakes/export from the beginning
model.lb(find(ismember(model.rxns,'EX_o2s[e]')))=0;
model.lb(find(ismember(model.rxns,'EX_oh1[e]')))=0;
model.ub(find(ismember(model.rxns,'EX_oh1[e]')))=0;
model.lb(find(ismember(model.rxns,'EX_ppi[e]')))=0;
model.lb(find(ismember(model.rxns,'sink_fe3[c]')))=0;
model.lb(find(ismember(model.rxns,'sink_band[c]')))=0;
model.ub(find(ismember(model.rxns,'sink_band[c]')))=0;

A = fastcc_4_rfastcormics(model, 1e-4, 1);
% or with COBRA fastcc:
% [A, ~, ~] = fastcc(model, 1e-4, 1, 0, 'original');

model=removeRxns(model, model.rxns(setdiff(1:numel(model.rxns),A)));
model.rxns(find(contains(model.rxns,'biomass')))
model_orig=model;
A = fastcc_4_rfastcormics(model, 1e-4, 1);
% or with COBRA fastcc:
% [A, ~, ~] = fastcc(model, 1e-4, 1, 0, 'original');
clear model

%% load medium example and data
% load RPMI.mat
[NUM,TXT,RAW]=xlsread('RPMI_Formulation');
medium_RPMI=TXT(2:end,2);
medium_RPMI_EX=cellfun(@(x)['EX_' x],medium_RPMI,'uni',false);
T=table(medium_RPMI_EX,medium_RPMI,NUM(:,3))

load('melanoma.mat') % load the example data (FPKM)
melanoma=table(melanoma.ensembl_id,melanoma.Mold1,melanoma.Mold2,melanoma.Mold3,melanoma.A3751,melanoma.A3752,melanoma.A3753);
data=table2array(melanoma(:,2:end));
melanoma.Properties.VariableNames={'ID','Mold1','Mold2','Mold3','A3751','A3752','A3753'};
colnames=melanoma.Properties.VariableNames(2:end);

rownames=melanoma.ID;
rownames=strtok(rownames,'.');

%% visualize data (sample 1)
figure
boxplot(log2(data+1));

signal = log2(data(:,1)+1); % log2-transform the first sample of the fpkm data
signal(isinf(signal)) = -100000; %find the -Inf values and change them to -100000
signal = signal(signal>-10000); % remove samples with low expression
figure
hist((signal),100);
ylabel('signal'); xlabel('log2(FPKM+1)')

% Check discretization figures with figflag=1:
discretized = discretize_FPKM(data, colnames,1); %with figures, will save figures in Figures folder
% discretized = discretize_FPKM(data, colnames,0);
figure
hist(discretized)

% discretized gene count for sample1:
tabulate(discretized(:,1))

%% PCA
% [coeff,score,latent,tsquared,explained] = pca(data');
[coeff,score,latent,tsquared,explained] = pca(zscore(data')); %zscore normalized
figure, hold on
idx1=find(contains(colnames,'Mold'));
idx2=setdiff(1:numel(colnames),idx1);
plot(score(idx1,1),score(idx1,2),'k*') %Primary
plot(score(idx2,1),score(idx2,2),'r*')
xlabel('1st Principal Component')
ylabel('2nd Principal Component')
legend({'Mold','A375'},'Location','North')
hold off

%% PCA 3D
figure
plot3(score(idx1,1),score(idx1,2),score(idx1,3),'k*') %Primary
hold on
plot3(score(idx2,1),score(idx2,2),score(idx2,3),'r*')
grid on
text(score(:,1),score(:,2),score(:,3),colnames)
hold off

%% 3) Model reconstruction using rFASTCORMICS
% Besides gene expression data, rFASTCORMICS needs other inputs. Below is the 
% function:
% 
% |[model, A_final] = fastcormics_RNAseq(model, data, rownames, dico, already_mapped_tag, 
% consensus_proportion, epsilon, optional_settings)|
% 
% |Inputs|
%
% * *model* this model will be used to extract the context-specific model from
% * *data* the discretized data with 1 for expressed genes, 0 for unknown expression 
% and -1 for unexpressed genes
% * *rownames* of the data corresponding to the gene names for each row in the 
% data
% * *dico* a dictionary to map the gene names to the gene names in the model 
% (provided)
% * *already_mapped_tag* should be 0 because the data has not been mapped to 
% the GPR rules of the model
% * *consensus_proportion* in case several samples are used to reconstruct a 
% model, generally 0.9
% * *epsilon* the flux threshold value, generally 1e-4
% * *optional_settings* a struct with several subfields such as reactions that 
% have to be included in the model and the medium composition 
%
% Outputs
% * *model* context-specific model based on the input data
% * *A_final* a vector containing the indices of the reactions to be included 
% in the output model
% You can build two types of models with FASTCORMICS: either you create one 
% model per discretized sample or you create one generic model from a set of samples. 

epsilon = 1e-4;
consensus_proportion = 0.9; %gene has to be expressed in 90% of the cases in order to be included.
% Only relevant if you want to create one model from different samples
already_mapped_tag = 0;

unpenalizedSystems = {'Transport, endoplasmic reticular';
    'Transport, extracellular';
    'Transport, golgi apparatus';
    'Transport, mitochondrial';
    'Transport, peroxisomal';
    'Transport, lysosomal';
    'Transport, nuclear'};
subSys=vertcat(model_orig.subSystems{:});
unpenalized = model_orig.rxns(ismember(subSys,unpenalizedSystems));

optional_settings.unpenalized = unpenalized;
optional_settings.func = {'DM_atp_c_', 'biomass_reaction'}; %biomass_maintenance %-> c
% Optional: force all medium components into the model
optional_settings.func = {'DM_atp_c_', 'biomass_reaction', medium_RPMI_EX{:}}; %biomass_maintenance %-> c

not_medium_constrained = {'EX_hdl_hs[e]'}
optional_settings.not_medium_constrained = not_medium_constrained;
optional_settings.medium = medium_RPMI; %(add media instead)

biomass_rxn = {'biomass_reaction'} %%% TS ??? %not closed export

load('dicorFASTCORMICS.mat')

%% Model building sample 1
% model.genes=regexprep(model.genes,'\.[0-9]+$','');
[model1, A1] = fastcormics_RNAseq(model_orig,discretized(:,1), rownames, dico, biomass_rxn, already_mapped_tag, consensus_proportion, epsilon, optional_settings);
model1

% check if biomass is included
idx=find(contains(model1.rxns, 'biomass'))
model1.rxns(idx)

% additional medium components
[selExc, selUpt] = findExcRxns(model1);
temp=model1.rxns(find(selUpt));
temp2=findMetsFromRxns(model1,temp) %included medium
setdiff(medium_RPMI,temp2)  %not included medium
setdiff(temp2,medium_RPMI)  %additional medium components

%% Model building consensus models
idx=find(contains(colnames,'Mold'))
[modelM, AM] = fastcormics_RNAseq(model_orig,discretized(:,idx), rownames, dico, biomass_rxn, already_mapped_tag, consensus_proportion, epsilon, optional_settings);
modelM
% check if biomass is included
idx=find(contains(modelM.rxns, 'biomass'))
modelM.rxns(idx)

idx=find(contains(colnames,'A375'))
[modelA, AA] = fastcormics_RNAseq(model_orig,discretized(:,idx), rownames, dico, biomass_rxn, already_mapped_tag, consensus_proportion, epsilon, optional_settings);
modelA
% check if biomass is included
idx=find(contains(modelA.rxns, 'biomass'))
modelA.rxns(idx)

%% Optimize for biomass
idx=find(contains(model1.rxns, 'biomass'))
m = changeObjective(model1,model1.rxns(idx));
find(m.c)

sol = optimizeCbModel(m,'max','zero')
sol.f

% uptake: only medium?
[selExc, selUpt] = findExcRxns(m);
flux_Hu = table(m.rxns(find(selUpt)), sol.x(find(selUpt)))

% secretion
selSecr=setdiff(find(selExc),find(selUpt));
flux_Hs = table(m.rxns(selSecr), sol.x(selSecr));
idx=find(sol.x(selSecr)~=0);
flux_Hs(idx,:)

%% Optimize for biomass with constrained medium (concentrations)
idx=find(contains(model1.rxns, 'biomass'))
m = changeObjective(model1,model1.rxns(idx));
find(m.c)

% set medium uptake rates to concentrations
[temp,IA,IB]=intersect(m.rxns,T.medium_RPMI_EX);
tempS=nonzeros(m.S(:,IA));
for counter=1:numel(IA)
    if tempS(counter)>0
        m.ub(IA(counter))=T.Var3(IB(counter));
    else
        m.lb(IA(counter))=-T.Var3(IB(counter));
    end
end

sol = optimizeCbModel(m,'max','zero')
sol.f

% uptake
[selExc, selUpt] = findExcRxns(m);
flux_Hu = table(m.rxns(find(selUpt)), sol.x(find(selUpt)))

% secretion
selSecr=setdiff(find(selExc),find(selUpt));
flux_Hs = table(m.rxns(selSecr), sol.x(selSecr));
idx=find(sol.x(selSecr)~=0);
flux_Hs(idx,:)
